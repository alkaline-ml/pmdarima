{# This is a Jinja2 template that will render out to $ROOT/conda/meta.yaml #}
package:
  name: "pmdarima"
  version: "{{ VERSION }}"

{# Path where setup.py lies from root/conda (since that is where this will be rendered) #}
source:
  git_url: ../

build:
  {% raw %}
  number: {{ environ.get('GIT_DESCRIBE_NUMBER', 0) }}
  string: py{{ CONDA_PY }}{{ environ.get('GIT_DESCRIBE_HASH', '') }}_{{ environ.get('GIT_DESCRIBE_NUMBER', 0) }}
  {% endraw %}
  {#
  The first one here installs to the default location (which is where testing happens)
  and the second one installs to $PREFIX, which is set by conda-build and is necessary
  for the `lib` folder to end up in the tar.bz2
  #}
  script: |
    python -m pip install --no-deps --ignore-installed .
    python -m pip install --prefix $PREFIX --no-deps --ignore-installed .
  ignore_run_exports:
    - pip
    - statsmodels
    - numpy
    - numpy-base
    - scipy
    - cython
    - scikit-learn
    - pandas
    - python

  requirements:
    build:
      {% raw %}
      - {{ compiler('c') }}
      {% endraw %}

    host:
      - pip
      {% raw %}
      - python {{ PY_VER }}
      {% endraw %}
      {% for package in requirements %}
      - {{ package }}
      {% endfor %}

    run:
      {% raw %}
      - python {{ PY_VER }}
      {% endraw %}
      {% for package in requirements %}
      - {{ package }}
      {% endfor %}

test:
  commands:
    {# conda-forge has the wrong versions pinned, so we have to pip install these #}
    - pip install pytest pytest-mpl pytest-benchmark
    {# Cannot use `make` in the meta.yaml file #}
    - pytest --showlocals --durations=20 --pyargs pmdarima --benchmark-skip
    - python -c "import pmdarima; pmdarima.show_versions()"

about:
  home: https://github.com/alkaline-ml/pmdarima
  license: MIT
  license_file: LICENSE
  summary: Python's forecast::auto.arima equivalent

extra:
  maintainers:
    - Taylor G. Smith
