steps:
  - bash: |
      if [ -f ${BUILD_SOURCESDIRECTORY}/pmdarima/VERSION ]; then
        echo "##vso[task.setvariable variable=VERSION_EXISTS]true"
      else
         echo "##vso[task.setvariable variable=VERSION_EXISTS]false"
      fi
    displayName: Checking for VERSION file

  - bash: |
      # This looks like it is running `conda build` again, but it just returns the output file
      output_file=$(conda-build --output --python=$(python.version) conda/)

      # Check our VERSION. Basically, if it contains letters, it is a pre-release. Otherwise,
      # it has to match X.Y or X.Y.Z
      #
      # --skip means skip existing (can be a little confusing)
      if [[ $(cat ${BUILD_SOURCESDIRECTORY}/pmdarima/VERSION) =~ '^[0-9]+\.[0-9]+\.?[0-9]*?[a-zA-Z]+[0-9]*$' ]]; then
        # Adding the `test` label means it doesn't show up unless you specifically
        # search for packages with the label `test`
        echo 'Uploading to conda with test label'
        anaconda upload --label test --skip $output_file
      elif [[ $(cat ${BUILD_SOURCESDIRECTORY}/pmdarima/VERSION) =~ '^[0-9]+\.[0-9]+\.?[0-9]*?$' ]]; then
        echo 'Uploading to production conda channel'
        anaconda upload --skip $output_file
      else
        echo 'Malformed tag'
        exit 1
      fi
    condition: and(succeeded(), eq(variables['VERSION_EXISTS'], 'true'), contains(variables['Build.SourceBranch'], 'refs/tags'))
    displayName: Deploying to conda
    env:
      ANACONDA_API_TOKEN: $(anacondaToken)
