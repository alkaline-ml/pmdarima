name: Build PyPy Dependencies

on: [push]  # Just do it on push for now

jobs:
  build:
    name: Build PyPy Dependencies
    runs-on: ubuntu-latest
    container: pypy:3.6-7.1.1
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Fixing Python Version
        run: ln -sf `which pypy3` /usr/bin/python

      - name: Installing build requirements
        run: |
          apt-get -yq update && apt-get -yq install \
            libatlas-dev \
            libatlas-base-dev \
            liblapack-dev \
            gfortran
          python -m pip install --upgrade pip
          # This seems silly, but we have to install these to build the wheels we want below
          python -m pip install "$(cat requirements.txt | grep Cython)"
          python -m pip install "$(cat requirements.txt | grep numpy)"
          python -m pip install "$(cat requirements.txt | grep scipy)"
          python -m pip install "$(cat requirements.txt | grep scikit-learn)"
          python -m pip install "$(cat requirements.txt | grep pandas)"
          python -m pip install "$(cat requirements.txt | grep statsmodels)"
          python -m pip install matplotlib
          python -m pip install pytest pytest-benchmark
          python -m pip install twine

      - name: Building wheels
        run: |
          python -m pip wheel --wheel-dir ${GITHUB_WORKSPACE}/packages "$(cat requirements.txt | grep Cython)"
          python -m pip wheel --wheel-dir ${GITHUB_WORKSPACE}/packages "$(cat requirements.txt | grep numpy)"
          python -m pip wheel --wheel-dir ${GITHUB_WORKSPACE}/packages "$(cat requirements.txt | grep scipy)"
          python -m pip wheel --wheel-dir ${GITHUB_WORKSPACE}/packages "$(cat requirements.txt | grep scikit-learn)"
          python -m pip wheel --wheel-dir ${GITHUB_WORKSPACE}/packages "$(cat requirements.txt | grep pandas)"
          python -m pip wheel --wheel-dir ${GITHUB_WORKSPACE}/packages "$(cat requirements.txt | grep statsmodels)"
          python -m pip wheel --wheel-dir ${GITHUB_WORKSPACE}/packages matplotlib
          python -m pip wheel --wheel-dir ${GITHUB_WORKSPACE}/packages pytest pytest-mpl pytest-benchmark

      # This is hacky. We essentially change the platform tag to `any` without actually converting the file
      # Since these are for internal use, and they will only run on Linux, this should be okay.
      # This is to get around an issue where Azure rejects linux files that aren't `manylinux` distributions
#      - name: Repairing wheels
#        run: |
#          shopt -s nullglob
#          wheels=(packages/*-linux_x86_64*)
#          for wheel in "${wheels[@]}"
#          do
#            mv $wheel ${wheel//linux_x86_64/any}
#          done
#        shell: bash

      - name: Try gemfury
        run: twine upload packages/* --repository-url https://push.fury.io/aaronreidsmith
        env:
          - TWINE_USERNAME: ${{ secrets.GEMFURY_TOKEN }}

#      - name: Uploading packages
#        run: twine upload --repository-url https://pkgs.dev.azure.com/tgsmith61591gh/pmdarima/_packaging/pmdarima-pypy-dependencies/pypi/upload --skip-existing packages/*
#        env:
#          TWINE_USERNAME: ${{ secrets.AZURE_ARTIFACTS_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.AZURE_ARTIFACTS_PASSWORD }}
