name: Mac and Windows Builds

on:
  push:
    branches:
      - 'master'
    tags:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  build-and-deploy:
    name: Build and Deploy
    strategy:
      matrix:
        os: [windows-latest, macos-10.15]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        architecture: ['x86', 'x64']
        exclude:
          # Don't build 32-bit on Mac
          - os: macos-10.15
            architecture: x86

          # Numpy does not build for 32-bit windows starting with Python 3.10, so we also have to exclude it
          - os: windows-latest
            architecture: x86
            python-version: 3.10
    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}

    steps:
      # This LOOKS like it is checking out 'master', but it is using the 'master' version of the checkout action
      # It is actually checking out the most recent version on this branch
      - name: Checkout
        uses: actions/checkout@master

      - name: Setting up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: Checking for cached pip dependencies (macOS)
        if: startsWith(runner.os, 'macOS')
        uses: actions/cache@v1
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Checking for cached pip dependencies (Windows)
        if: startsWith(runner.os, 'Windows')
        uses: actions/cache@v1
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Updating pip
        run: python -m pip install --upgrade pip

      - name: Installing requirements
        run: |
          pip install -r build_tools/build_requirements.txt
          pip install -r requirements.txt

      # We build the source archive separately because of this: https://github.com/alkaline-ml/pmdarima/pull/136#discussion_r279781731
      # We build it first because of this: https://github.com/alkaline-ml/pmdarima/issues/448
      - name: Building source distribution
        run: make version sdist

      - name: Building wheel
        run: make version bdist_wheel

      - name: Installing generated wheel
        run: pip install --pre --no-index --find-links dist/ pmdarima

      - name: Running unit tests
        run: |
          if [ "${{ matrix.os }}" == "macos-10.15" ]; then
            export PMD_MPL_BACKEND=TkAgg
          fi
          pytest --showlocals --durations=20 --pyargs pmdarima --benchmark-skip

      - name: Checking for numpy regression
        run: |
          pip install --upgrade numpy
          if [ "${{ matrix.os }}" == "macos-10.15" ]; then
            export PMD_MPL_BACKEND=TkAgg
          fi
          pytest --showlocals --durations=20 --pyargs pmdarima --benchmark-skip

      - name: Checking README compatibility
        run: |
          if python -c "from twine.commands.check import check; check(['dist/*'])" | grep  "warning"; then
              echo "README will not render properly on PyPI"
              exit 1
          else
              echo "README rendered appropriately"
          fi

      # See https://github.com/alkaline-ml/pmdarima/issues/448
      - name: Ensuring sdist SOURCES.txt has no absolute paths
        run: |
          cd dist
          tar xzf $(find . -name "*.tar.gz")
          OUTPUT_DIRECTORY=$(find . -type d -name "pmdarima-*")
          if grep -q "^/" ${OUTPUT_DIRECTORY}/pmdarima.egg-info/SOURCES.txt; then
            echo "SOURCES.txt contains absolute paths in sdist"
            exit 1
          else
            echo "SOURCES.txt looks good"
            rm -rf "$OUTPUT_DIRECTORY"
          fi

      - name: Ensuring sdist can be installed
        run: pip install dist/$(ls dist | grep tar)

      - name: Ensuring VERSION file existis
        id: version_check  # Need this to refer to output below
        run: |
          if [ -f "${GITHUB_WORKSPACE}/pmdarima/VERSION" ]; then
            echo "VERSION file exists"
            echo "::set-output name=version_exists::true"
          else
            echo "VERSION file does not exist"
            echo "::set-output name=version_exists::false"
          fi

      - name: Deploying to PyPI
        # Only deploy on tags and when VERSION file created
        if: startsWith(github.ref, 'refs/tags') && success() && steps.version_check.outputs.version_exists == 'true'
        run: |
          chmod +x build_tools/github/deploy.sh
          ./build_tools/github/deploy.sh
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

  build-and-deploy-aarch64:
    name: 'Build and Deploy (aarch64)'
    strategy:
      matrix:
        python-version: [cp37-cp37m, cp38-cp38, cp39-cp39, cp310-cp310]
    env:
      python: /opt/python/${{ matrix.python-version }}/bin/python
#      image: quay.io/pypa/manylinux2014_aarch64
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1

      - name: Build and Test
        uses: uraimo/run-on-arch-action@v2.1.1
        with:
          arch: aarch64
          distro: ubuntu20.04
          # Used for caching containers in our repo's package registry
          githubToken: ${{ github.token }}
          dockerRunArgs: --volume ${{ github.workspace }}:/workspace:rw --workdir=/workspace
          run: |
            PYTHON=${{ env.python }}

            # Set up virtual env
            $PYTHON -m pip install virtualenv
            $PYTHON -m venv .env
            source .env/bin/activate

            # Install requirements
            pip install --upgrade pip
            pip install -r build_tools/build_requirements.txt
            pip install -r requirements.txt

            # Make our wheel
            make version bdist_wheel

            # Install and run tests
            pip install --pre --no-index --find-links dist/ pmdarima
            pytest --showlocals --durations=20 --pyargs pmdarima --benchmark-skip

#      - name: Build and Test
#        run: |
#          chmod +x .github/utils/build_and_test_aarch64.sh
#          docker run --rm -v ${{ github.workspace }}:/workspace:rw --workdir=/workspace \
#            ${{ env.image }} .github/utils/build_and_test_aarch64.sh ${{ env.python }}

      - name: Ensuring VERSION file existis
        id: version_check  # Need this to refer to output below
        run: |
          if [ -f "${GITHUB_WORKSPACE}/pmdarima/VERSION" ]; then
            echo "VERSION file exists"
            echo "::set-output name=version_exists::true"
          else
            echo "VERSION file does not exist"
            echo "::set-output name=version_exists::false"
          fi

      - name: Deploying to PyPI
        # Only deploy on tags and when VERSION file created
        if: startsWith(github.ref, 'refs/tags') && success() && steps.version_check.outputs.version_exists == 'true'
        run: |
          chmod +x build_tools/github/deploy.sh
          ./build_tools/github/deploy.sh
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
