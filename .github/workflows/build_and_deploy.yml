name: Mac and Windows Builds

on:
  push:
    branches:
      - '*'
    tags:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  build-and-deploy:
    name: Build and Deploy
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.5', '3.6', '3.7', '3.8']
        architecture: ['x86', 'x64']
        exclude:
          # Don't build 32-bit on Mac
          - os: macos-latest
            architecture: x86

    runs-on: ${{ matrix.os }}

    steps:
      # This LOOKS like it is checking out 'master', but it is using the 'master' version of the checkout action
      # It is actually checking out the most recent version on this branch
      - name: Checkout
        uses: actions/checkout@master

      # Visual Studio 2019 (windows-latest) doesn't include these files for some reason??
      # Even stranger, it really only affects Python 3.5, but we run it across all versions for consistency
      # https://social.msdn.microsoft.com/Forums/vstudio/en-US/06675e6d-9a0b-46f5-8de0-10237fab1ece/link-error-lnk1158?forum=vcgeneral
      - name: Fix Windows
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x86\rc.exe" -Destination "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN"
          Copy-Item "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x86\rcdll.dll" -Destination "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN"
        shell: powershell

      - name: Setting up Python
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
      - name: Checking for cached pip dependencies (macOS)
        if: startsWith(runner.os, 'macOS')
        uses: actions/cache@v1
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Checking for cached pip dependencies (Windows)
        if: startsWith(runner.os, 'Windows')
        uses: actions/cache@v1
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Updating pip
        run: python -m pip install --upgrade pip
        shell: bash

      # statsmodels throws a fit on Windows and Python 3.8 if we don't preinstall these
      - name: Preinstalling Cython, numpy, and scipy (Windows only)
        if: startsWith(runner.os, 'Windows')
        run: |
          pip install "$(cat requirements.txt | grep Cython)"
          pip install "$(cat requirements.txt | grep numpy)"
          pip install "$(cat requirements.txt | grep scipy)"
        shell: bash

      - name: Installing requirements
        run: |
          pip install -r requirements.txt
          pip install -r build_tools/build_requirements.txt
        shell: bash

      - name: Building wheel
        run: make version bdist_wheel
        shell: bash

      - name: Installing generated wheel
        run: pip install --pre --no-index --find-links dist/ pmdarima
        shell: bash

      - name: Running unit tests
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export PMD_MPL_BACKEND=TkAgg
          fi
          pytest --showlocals --durations=20 --pyargs pmdarima --benchmark-skip
        shell: bash

      # We build the source archive separately because of this: https://github.com/alkaline-ml/pmdarima/pull/136#discussion_r279781731
      - name: Building source distribution
        run: make version sdist
        shell: bash

      - name: Checking README compatibility
        run: |
          if python -c "from twine.commands.check import check; check(['dist/*'])" | grep  "warning"; then
              echo "README will not render properly on PyPI"
              exit 1
          else
              echo "README rendered appropriately"
          fi
        shell: bash

      - name: Ensuring sdist can be installed
        run: pip install dist/$(ls dist | grep tar)
        shell: bash

      - name: Ensuring VERSION file existis
        id: version_check  # Need this to refer to output below
        run: |
          if [ -f "${GITHUB_WORKSPACE}/pmdarima/VERSION" ]; then
            echo "VERSION file exists"
            echo "::set-output name=version_exists::true"
          else
            echo "VERSION file does not exist"
            echo "::set-output name=version_exists::false"
          fi
        shell: bash

      - name: Deploying to PyPI
        # Only deploy on tags and when VERSION file created
        if: github.event_name == 'tag' && success() && steps.version_check.version_exists == 'true'
        run: |
          # Check our VERSION. Basically, if it contains letters, it is a pre-release. Otherwise,
          # it has to match X.Y or X.Y.Z
          if [[ $(cat ${GITHUB_WORKSPACE}/pmdarima/VERSION) =~ '^[0-9]+\.[0-9]+\.?[0-9]*?[a-zA-Z]+[0-9]*$' ]]; then
            echo 'Uploading to test pypi'
            python -m twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing dist/pmdarima-*
          elif [[ $(cat ${GITHUB_WORKSPACE}/pmdarima/VERSION) =~ '^[0-9]+\.[0-9]+\.?[0-9]*?$' ]]; then
            echo 'Uploading to production pypi'
            python -m twine upload --skip-existing dist/pmdarima-*
          else
            echo 'Malformed tag'
            exit 1
          fi
        shell: bash
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
