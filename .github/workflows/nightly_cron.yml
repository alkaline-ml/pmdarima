name: Test against latest dependencies

# Run if we change any of these paths and every night at 1 (or 2) AM Central time
on:
  push:
    branches-ignore:
      - 'master'
    paths:
    - 'requirements.txt'
    - '.github/workflows/nightly_cron.yml'

  schedule:
    - cron: '0 7 * * *'  # Every day at 07:00 UTC (1AM CST or 2AM CDT)

jobs:
  build:
    name: Build against latest dependencies
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.9']
        architecture: ['x86', 'x64']
        exclude:
          # Don't build 32-bit on Mac or Linux
          - os: macos-latest
            architecture: x86

          - os: ubuntu-latest
            architecture: x86

    runs-on: ${{ matrix.os }}

    outputs:
      dependency-table: ${{ steps.dependency-table.outputs.table }}

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Setting up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Set Run ID
        id: definition  # Needed to retrieve the output of this step later
        run: echo "::set-output name=run_id::$GITHUB_RUN_ID"
        shell: bash

      - name: Updating pip
        run: python -m pip install --upgrade pip
        shell: bash

      - name: Collecting naked dependencies
        id: dependencies  # Needed to retrieve the output of this step later
        run: |
          dependencies=$(python build_tools/github/get_latest_dependencies.py)
          echo "::set-output name=latest_dependencies::$dependencies"
        shell: bash

        # https://github.com/actions/cache/blob/master/examples.md#using-pip-to-get-cache-location
      - name: Get pip cache dir
        id: pip-cache-dir-path
        run: echo "::set-output name=dir::$(pip cache dir)"

      - name: Generating cache key file
        id: dependency-table  # Needed to set output of job
        run: |
          pip install requests tabulate
          table=$(python .github/utils/get_dependency_releases.py $DEPENDENCIES)
          echo $table > dependencies_key.txt

          # This is used in the next job (if necessary) rather than re-running the above
          echo "::set-output name=table::$table"
        shell: bash
        env:
          DEPENDENCIES: ${{ steps.dependencies.outputs.latest_dependencies }}

      - name: Check for cache hit
        id: pip-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/dependencies_key.txt') }}

      # We install one-by-one because some dependencies depend on others
      - name: Installing dependencies
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          for dependency in $DEPENDENCIES; do
            python -m pip install $dependency
          done
        shell: bash
        env:
          DEPENDENCIES: ${{ steps.dependencies.outputs.latest_dependencies }}

      - name: Building wheel
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: make bdist_wheel
        shell: bash

      - name: Installing generated wheel
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: pip install --pre --no-index --find-links dist/ pmdarima
        shell: bash

      - name: Running unit tests
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export PMD_MPL_BACKEND=TkAgg
          fi
          pytest --showlocals --durations=20 --pyargs pmdarima
        shell: bash

      # https://github.com/marketplace/actions/action-slack#custom-notification
      - name: Posting to Slack
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: custom
          custom_payload: |
            {
              text: ":no_entry: Nightly Build Failed",
              attachments: [{
                "author_name": "Nightly Build", // This one needs to be in quotes for some reason
                fallback: 'Nightly Build Failed!',
                color: 'danger',
                title: 'CI Result',
                text: 'Failed',
                fields: [
                  {
                    title: 'OS',
                    value: '${{ matrix.os }}',
                    short: false
                  },
                  {
                    title: 'Architecture',
                    value: '${{ matrix.architecture }}',
                    short: false
                  },
                  {
                    title: 'Python Version',
                    value: '${{ matrix.python-version }}',
                    short: false
                  },
                  {
                    title: 'Link to Run',
                    value: '<https://github.com/alkaline-ml/pmdarima/actions/runs/${{ env.RUN_ID }}|HERE>',
                    short: false
                  }
                ],
                actions: [{}]  // Don't know if we actually need this, but it is shown in the docs as empty
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.NIGHTLY_SLACK_CHANNEL }}
          RUN_ID: ${{ steps.definition.outputs.run_id }}

  # We only run this job if the previous one fails (any of the 4 jobs that it spins up)
  send_latest_releases:
    needs: [build]
    if: failure()
    name: Send latest dependency releases to Slack
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Setting up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Posting to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Latest Dependency Releases (most recent first):\n${{ env.TABLE }}",
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.NIGHTLY_SLACK_CHANNEL }}
          TABLE: ${{ needs.build.outputs.dependency-table }}
