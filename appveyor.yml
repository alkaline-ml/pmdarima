# AppVeyor.com is a Continuous Integration service to build and run tests under Windows
# This .yml file is based on scikit-learn and statsmodels' Appveyor CI setups, adapted for
# use with pmdarima https://ci.appveyor.com/project/tgsmith61591/pmdarima

os: Visual Studio 2015

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\build_tools\\appveyor\\run_with_env.cmd"
  PYPI_USERNAME: tgsmith61591.gh
  PYPI_PASSWORD:
    secure: okvMa3VgIXdlnMC48iMefQ==

  # For deployments, we have to build on the architecture we want to ship.
  # However, since there are so many and appveyor doesn't run in parallel,
  # we don't need to run tests for all of them. We can just build some for
  # deployments.
  matrix:
    - PYTHON_ARCH: "32"
      PYTHON_VERSION: "3.5.1"
      MPL_VERSION: "2.2.3"
      PMDARIMA_MPL_DEBUG: "true"
      PYTHON: "C:\\Python35"
      DO_TEST: "false"

    - PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.5.1"
      MPL_VERSION: "2.2.3"
      PMDARIMA_MPL_DEBUG: "true"
      PYTHON: "C:\\Python35-x64"
      DO_TEST: "true"

    - PYTHON_ARCH: "32"
      PYTHON_VERSION: "3.6.6"
      MPL_VERSION: "2.2.3"
      PMDARIMA_MPL_DEBUG: "true"
      PYTHON: "C:\\Python36"
      DO_TEST: "true"

    - PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.6.6"
      MPL_VERSION: "2.2.3"
      PMDARIMA_MPL_DEBUG: "true"
      PYTHON: "C:\\Python36-x64"
      DO_TEST: "false"

    - PYTHON_ARCH: "32"
      PYTHON_VERSION: "3.7.0"
      MPL_VERSION: "2.2.3"
      PMDARIMA_MPL_DEBUG: "true"
      PYTHON: "C:\\Python37"
      DO_TEST: "false"

    - PYTHON_ARCH: "64"
      PYTHON_VERSION: "3.7.0"
      MPL_VERSION: "2.2.3"
      PMDARIMA_MPL_DEBUG: "true"
      PYTHON: "C:\\Python37-x64"
      DO_TEST: "true"

version: '{branch}-{build}'
cache:
  - '%LOCALAPPDATA%\pip\Cache'

# Because we only have a single worker, we don't want to waste precious
# appveyor CI time and make other PRs wait for repeated failures in a failing
# PR. The following option cancels pending jobs in a given PR after the first
# job failure in that specific PR.
matrix:
    fast_finish: true

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds.
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=500).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - "powershell ./build_tools/appveyor/install.ps1"
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "python -m pip install -U pip"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "pip --version"

  # 9/25/18 - Use the scikit approach
  # Build the package (and the wheels!)
  - "%CMD_IN_ENV% pip install --timeout=60 -r build_tools/appveyor/requirements.txt"
  # - "%CMD_IN_ENV% python setup.py bdist_wheel bdist_wininst"
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - ps: "ls dist"

  # Check for README compatibility in case we deploy (check output for `warning`)
  - ps: |
      if (python -c "from twine.commands.check import check; check(['dist/*'])" | Select-String -Pattern "warning") {
        echo "README will not render properly on PyPI"
        exit 1
      } else {
        echo "README rendered appropriately"
      }

  # Install the generated wheel file
  - "pip install --pre --no-index --find-links dist/ pmdarima"

# Not a .NET project, we build pmdarima in the install step instead
build: false

test_script:
  # Test with pytest
  - ps: |
      if ($env:DO_TEST -Match "true") {
        pytest --showlocals --durations=20 --mpl --mpl-baseline-path=etc/pytest_images --pyargs pmdarima --benchmark-skip
      } else {
        echo "Not running tests since DO_TEST is not 'true'"
      }

after_test:
  - set PATH=%BK_PATH%

artifacts:
  - path: dist\*

deploy_script:
  - echo "Starting artifact deployment"
  - set PATH=%BK_PATH%
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true") { Invoke-Expression "twine upload -u tgsmith61591.gh -p $env:PYPI_PASSWORD --skip-existing dist/*" } Else { write-output "Not on a tagged commit, won't deploy to pypi"}
  #- ps: If ($env:APPVEYOR_REPO_BRANCH -eq "develop") { Invoke-Expression "twine upload -u tgsmith61591.gh -p $env:PYPI_PASSWORD --repository-url https://test.pypi.org/legacy/ --skip-existing dist/*" } Else { write-output "Not on a development commit, won't deploy to pypitest"}
